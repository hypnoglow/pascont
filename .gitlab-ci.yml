image: docker:latest
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay
  REPO_NAME: github.com/hypnoglow/pascont

stages:
  - test
  - build
  - deploy

#
# Common
#

before_script:
  - echo "Build number ${CI_COMMIT_SHA:0:7}"

.prepare-golang-project: &prepare-golang-project
  before_script:
    - echo "Build number ${CI_COMMIT_SHA:0:7}"
    - go version
    - apk add --no-cache --virtual .build-deps git
    - go get -u -v github.com/golang/dep/cmd/dep
    - mkdir -p $(dirname ${GOPATH}/src/${REPO_NAME})
    - cp -R ${CI_PROJECT_DIR} $(dirname ${GOPATH}/src/${REPO_NAME})
    - cd ${GOPATH}/src/${REPO_NAME}

#
# Jobs
#â‰¤

test-sh:
  image: golang:1.8-alpine
  stage: test
  <<: *prepare-golang-project
  script:
    - apk add --no-cache bash
    - ./test.sh
    - dep ensure -v
    - go test $(go list ./... | grep -v "/vendor/")

build-image:
  stage: build
  script:
    - docker version
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build
      -t ${CI_REGISTRY_IMAGE}:latest
      -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:7} .
    - docker push ${CI_REGISTRY_IMAGE}:latest
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:7}

deploy-staging:
  stage: deploy
  script:
    - echo "Deployed to staging!"
  environment:
    name: staging
  when: on_success

deploy-production:
  stage: deploy
  script:
    - echo "Deployed to production!"
  environment:
    name: production
  when: manual
